CloudFlare Keyless SSL reference implementation user guide
==========================================================

This repository contains a reference implementation of CloudFlare's
keyless SSL server.

Protocol
--------

The CloudFlare Keyless SSL client communicates to the server via a
binary protocol over a mutually authenticated TLS tunnel.  Messages
are in binary format and identified by a unique ID.

Messages consist of a fixed length header, and a variable length body.
The body of the message consists of a sequence of items in TLV (tag,
length, value) messages.

All messages with major version 1 will conform to the following
format.  The minor version is currently set to 0 and is reserved for
communicating policy information.

Header:

    0 - - 1 - - 2 - - 3 - - 4 - - - - 6 - - 7 - - 8
    | Maj | Min |   Length  |          ID           |
    |                    Body                       |
    |   Body       | <- 8 + Length

Item:

    0 - - 1 - - 2 - - 3 - - 4 - - - - 6 - - 7 - - 8
    | Tag |   Length  |          Data               |
    |           Data             | <- 3 + Length


All numbers are in network order (big endian).

The following tag values are possible for items:

0x01 - Certificate Digest,
0x02 - Server Name Indication,
0x03 - Client's IP address,
0x11 - Opcode,
0x12 - Payload,

A requests contains a header and the following items:

0x01 - length: 32 bytes, data: SHA256 of RSA modulus
0x02 - length: variable, data: SNI string
0x03 - length: 4 or 16 bytes, data: IPv4/6 address
0x11 - length: 1, data: opcode describing operation
0x12 - length: variable, data: payload to sign or encrypt

The following opcodes are supported in the opcode item:

0x01 - operation: RSA decrypt payload 
0x02 - operation: RSA sign MD5SHA1
0x03 - operation: RSA sign SHA1
0x04 - operation: RSA sign SHA224
0x05 - operation: RSA sign SHA256
0x06 - operation: RSA sign SHA384
0x07 - operation: RSA sign SHA512

Responses contain a header with a matching ID and only two items:

0x11 - length: 1, data: opcode describing operation status
0x12 - length: variable, data: payload response

The following opcodes are supported in the opcode item:

0xF0 - operation: success, payload: modified payload
0xFF - operation: RSA decrypt payload, payload: 

On an error, these are the possible 1-byte payloads:

0x01 - cryptography failure
0x02 - key not found - no matching certificate ID
0x03 - read error - disk read failure
0x04 - version mismatch - unsupported version incorrect
0x05 - bad opcode - use of unknown opcode in request
0x06 - unexpected opcode - use of response opcode in request
0x07 - format error - malformed message
0x08 - internal error - memory or other internal error


Key Management
--------------

The Keyless SSL server is a TLS server and therefore requires
cryptographic keys. All requests are mutually authenticated, so both
the client and the server need a TLS 1.2 compatible key pair.

The server will need a valid key and certificate pair in PEM format.
The following options are required and take a path to these files:

* --server-cert 
* --server-key

The private keys that this server is able to use should be stored in
PEM format in a directory denoted by the option:
--private-key-directory

In order to authenticate the client'certificate, a custom CA file is
required.  This CA file is provided by CloudFlare and provided with:
--ca-file


Code Organization
-----------------

The code is split into several files by function in order to enable
swapping with custom implementations.

kssl.h: contains the shared constants and structures
kssl_core.h: APIs for performing the keyless operation
kssl_helpers.h: APIs for serialization and parsing functions
kssl_private_key.h: APIs for storing and matching private keys
kssl_log.h: APIs for writing logs

kssl_server.c: sample server implementation with openssl and libev
kssl_testclient.c: client implementation with openssl

The following files are reference implementations of the APIs above.

kssl_core.c: implementation of v1.0 policy for keyless operation
kssl_helpers.c: implementation of v1 serialization and parsing
kssl_private_key.c: implementation of reading, storage and operations of private keys using openssl
kssl_log.c: implementation of logging to stderr


Building and Dependencies
-------------------------

The Keyless SSL server implementation has two external dependencies,
OpenSSL and libev.  These are open source and available for most
platforms.

For Unix-based systems, the server and test suite are built with a
Makefile.

To build:

    make

Result:

    o/kssl_testclient o/kssl_server

To automatically test:

    make test


Recommended Settings
--------------------

The kssl_server command line options determine configuration.

The recommended value for cipher-list is: ECDHE-RSA-AES128-SHA256

The recommended port is 24008

